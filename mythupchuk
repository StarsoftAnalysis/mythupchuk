#!/usr/bin/perl

#########################################################################
# mythupchuk: MYTHtv UPdater for CHannels in the UK                     #
# Copyright (C) 2011,2012 Chris Dennis, chris@starsoftanalysis.co.uk    #
#                                                                       #
# This program is free software: you can redistribute it and/or modify  #
# it under the terms of the GNU General Public License as published by  #
# the Free Software Foundation, either version 3 of the License, or     #
# (at your option) any later version.                                   #
#                                                                       #
# This program is distributed in the hope that it will be useful,       #
# but WITHOUT ANY WARRANTY; without even the implied warranty of        #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         #
# GNU General Public License for more details.                          #
#                                                                       #
# You should have received a copy of the GNU General Public License     #
# along with this program.  If not, see <http://www.gnu.org/licenses/>. #
#########################################################################

use strict;
use warnings;
use 5.14.0;

use XML::Simple;
use DBI;
use Getopt::Long;
use POSIX qw/strftime/;
use LWP::Simple;            # for mirror()
use File::Basename;         # for basename()
use File::Spec::Functions;  # for catfile()
use File::Copy;             # for move()
use Data::Dumper;           # for debugging
use MythTV;

use feature 'unicode_strings';  # Because we're toying with strings that may be in unicode

my $version = '0.3.4';

$| = 1; # instant output

### CONFIGURATION: change the default options here, or supply command-line options
my %opt = ();
# Defaults:
$opt{renew}  = 1;
$opt{icondir}    = '/home/mythtv/.mythtv/channels';
$opt{geticons}   = 1;
$opt{debug}      = 0;
$opt{verbose}    = 0;
$opt{grabber}    = 'tv_grab_uk_rt --list-channels --config-file /dev/null 2> /dev/null';
$opt{fileupdate} = 0;
$opt{dbupdate}   = 0;
$opt{commit}     = 0;
$opt{help}       = 0;
$opt{bbc1}       = 'south';
$opt{bbc2}       = 'england';
$opt{itv}        = 'meridian';
$opt{stv}        = 'west';
$opt{c4}         = 'south&east';
$opt{c5}         = 'midlands&south';

my $GetOptionsOK = GetOptions (\%opt,
    'renew!',
    'icondir=s',
    'geticons!',
    'debug!',
    'verbose!',
    'grabber=s',
    'fileupdate!',
    'dbupdate!',
    'commit!',
    'help!',
    'bbc1=s',
    'bbc2=s',
    'itv=s',
    'stv=s',
    'c4=s',
    'c5=s',
);
exit 1 if !$GetOptionsOK;

sub usage {
    print <<eot;
mythupchuk: MYTHtv UPdater for CHannels in the UK, version $version.

Usage: mythupchuk [options] <channel file>

The channel file must contain the following tab-separated columns:

  sourceid  serviceid  channum  visible  delete  callsign  [name  [xmltvid [icon]]]

'visible' and 'delete' must be either 0 (for no/false) or 1 (for yes/true).
All columns are required except name, xmltvid, and icon.  If name is omitted, it will
be set to be the same as callsign.

Run mythupchuk with --fileupdate and the name of a non-existent file to create a file 
that can then be edited and used in future runs of mythupchuk.

Options, with default values in brackets.
(All 'yes'/'no' options can be prefixed with 'no' to override a default of 'yes'
 e.g. --nogeticons)
--fileupdate     Update the channels file with new data from the database [no]
--dbupdate       Update the database with new data from the input file [no]
--commit         Actually do the database updates [no]
                  (both --dbupdate and --commit are required to update the database)
--renew          Replace existing icon files with new ones [yes]
--geticons       Download icon files [yes]
--icondir <dir>  The writable directory to store icon files
                  [/home/mythtv/.mythv/channels]
--grabber <cmd>  Command to retrieve xmltv channel listings
                  [tv_grab_uk_rt --list-channels --config-file /dev/null 2> /dev/null]
--bbc1 <reg>     \\                                                      / [south]
--bbc2 <reg>      |  Default regions, e.g. 'south' for BBC One South,  |  [england]
--itv  <reg>       > Case is ignored, and spaces are removed.         <   [meridian]
--stv  <reg>      |                                                    |  [west]
--c4   <reg>      |                                                    |  [south&east]
--c5   <reg>     /                                                      \\ [midlands&south]
--help           Display this help text [no]
--verbose        Print extra progress information [no]
--debug          Print copious debugging information [no]

NOTE: If --dbupdate and --fileupdate are used together, the database is first updated
      with details from the channel file, and then any unmatched channels in the
      database are added to the end of the file.
NOTE: The region options (--bbc1 etc.) do NOT select a particular serviceid as 
      the default, they merely allow you to name your local region as just e.g. 'BBC 1'
      rather than 'BBC 1 South'.
eot
}

my $timestamp = strftime('%Y%m%d-%H%M', localtime);

# Header information for new file
my $header = <<eot;
# Channels file for use by mythupchuk, created $timestamp
# vim:ts=12
#
# DON'T EDIT SOURCEID OR SERVICEID unless you know what you're doing!!!
# And be careful editing NAME otherwise it won't match its XMLTVID.
#
# Blank lines and lines beginning with '#' are ignored,
# except for lines beginning with '#x' which indicates a channel that is 
# no longer in the database: such a line will be automatically un-commented
# if the channel reappears in the database (after a re-tune, for example).
#
# Columns MUST be separated by a single TAB.
#
#sourceid\tserviceid\tchannum\tvisible\tdelete\tcallsign\tname\txmltvid\ticon
eot

if ($opt{help}) {
    &usage;
    exit 0;
}

# Get input file name
my $inputFile = shift @ARGV || '';

# pre-run checks
if (!$inputFile) {
    print "ERROR: The input file name must be specified\n\n";
    &usage();
    exit 1;
}
my $newfile = 0;
if (!-e $inputFile) {
    # input file doesn't exist -- we'll create a new one
    open INPUTFILE, '>', $inputFile or die "Can't create new file '$inputFile' ($!)\n";
    print INPUTFILE $header;
    close INPUTFILE;
    $newfile = 1;
}
if (!-r $inputFile) {
    print "ERROR: Input file '$inputFile' is not readable\n";
    exit 1;
}
if ($opt{geticons} and !(-d -w $opt{icondir})) {
    print "ERROR: '$opt{icondir}' is not a writable directory to put icons in\n";
    exit 1;
}
$opt{commit} = 0 if !$opt{dbupdate};

# Prefix used on channel lines if the channel does not exist in the database
my $delpref = '#x ';

# Statistics
my $icons   = 0;
my $deleted = 0;
my $updated = 0;
my $news    = 0;
my $marked  = 0;

# Read and check the input file
my @filerows;
&readInputFile($inputFile, \@filerows);

# Read the channels list to get xmltvid and logo url by channel name
my %IDbyName;
my %IconByName;
if ($opt{dbupdate}) {
    &readXMLTV();
}
print "Icons: " . Dumper(\%IconByName) if $opt{debug};

# Create output file for the possibly-updated channels file
# (will get renamed later)
my $outputFile = "$inputFile-temp-$timestamp";
if ($opt{fileupdate}) {
    open OUTPUTFILE, '>', $outputFile or die "Can't create temporary output file '$outputFile'\n";
}

# Connect to mythbackend
my $mbe = new MythTV({'connect' => 0});
my $dbh = $mbe->{'dbh'};
#$dbh->{AutoCommit} = 0;  # enable transactions, if possible. NO -- test $opt{commit} each time.
$dbh->{RaiseError} = 1;  


eval {    # trap database errors
    
    # Load the relevant bits of the channel table into a hash,
    # keyed by sourceid/serviceid/chanid.
    # Of which sourceid/serviceid are how we match against the file,
    # and chanid is used in case of duplicates.
    my $sql = "select chanid, sourceid, serviceid, channum, callsign, name, xmltvid, icon, visible, 0 as matched
        from channel";
    my $dbR = $dbh->selectall_hashref($sql, ['sourceid', 'serviceid', 'chanid']); 

    # Work through all the input file lines stored in @filerows
    my $inputfilechanged = 0;
    foreach my $filerow (@filerows) {
        my $prefix = '';
        if ($filerow->{valid}) {
            my $sourceid  = $filerow->{sourceid};
            my $serviceid = $filerow->{serviceid};
            # It is a valid channel line -- look for a match in the db
            if (exists $dbR->{$sourceid}{$serviceid}) {
                # It is in the db (there may be duplicates)
                my @chanids = sort keys %{$dbR->{$sourceid}{$serviceid}};
                if (@chanids > 1) {
                    print "WARNING: More than 1 channel found in the database with sourceid $sourceid and serviceid $serviceid,\n";
                    print "         chanids are: @chanids.  callsigns are: " . 
                        join(' ', map {"'$_->{callsign}'"} @{$dbR->{$sourceid}{$serviceid}}{@chanids}) . "\n";
                }
                foreach my $chanid (@chanids) {
                    my $dbrow = $dbR->{$sourceid}{$serviceid}{$chanid};
                    print "Matched $sourceid-$serviceid/$chanid, callsign=$filerow->{callsign}\n" if $opt{debug};
                    $dbrow->{matched} = 1;
                    if ($opt{dbupdate}) {
                        if ($filerow->{delete}) {
                            # Delete the channel 
                            my $sql = 'delete from channel where chanid = ?';
                            my $rows = 1; # no. of rows we expect to delete
                            $rows = $dbh->do($sql, undef, $chanid) if $opt{commit};
                            print "Deleted channel $chanid (callsign $filerow->{callsign}) ($rows row(s))\n";
                            $deleted += $rows;
                            if ($opt{commit}) {
                                $prefix = $delpref;
                                $inputfilechanged = 1 unless $filerow->{marked};  
                            }
                        } else {
                            my $filesqname = &squash($filerow->{name});
                            my ($xmltvid, $icon) = &matchXmltvid($filesqname);
                            # Get xmltvid if not provided in file...
                            if (!$filerow->{xmltvid}) {
                                # ...from grabber info, or else keep what is in the database
                                $filerow->{xmltvid} = $xmltvid || $dbrow->{xmltvid} || '';
                            }
                            # Get icon that matches the xmltvid if not overridden in file...
                            if (!$filerow->{icon}) {
                                # ...from grabber info, or else keep what is in the database
                                $filerow->{icon} = $icon || $dbrow->{icon} || '';
                            }
                            # Update the database with new values for these columns:
                            &updateChannel($dbh, $chanid, $dbrow, $filerow, 
                                'channum', 'callsign', 'name', 'visible', 'xmltvid', 'icon')
                                if $opt{dbupdate};
                        }
                    } else {
                        # not updating the db, so nothing to do
                    }
                } # foreach $chanid
            } else {
                print "Not Matched $sourceid-$serviceid $filerow->{callsign} $filerow->{delete}\n" if $opt{debug};
                # It is not in the db - comment out the line in the file
                $prefix = $delpref;     
                if ($filerow->{marked}) {
                    # It was already marked 
                } else {
                    $marked += 1;
                    $inputfilechanged = 1;
                }
            }
        } 
        # Copy every line to the output file
        print OUTPUTFILE "$prefix$filerow->{raw}\n" if $opt{fileupdate};
    } # foreach line in the file

    if ($opt{fileupdate}) {
        # Add any unmatched db rows to the update file
        print OUTPUTFILE "# New channels added $timestamp...\n";
        # First, convert the nested hashes into a simple array of hashes
        # so that we can sort by channum
        my @rows;
        foreach my $sourceid (sort keys %$dbR) {
            foreach my $serviceid (sort keys %{$dbR->{$sourceid}}) { 
                foreach my $chanid (sort keys %{$dbR->{$sourceid}{$serviceid}}) {
                    my $row = $dbR->{$sourceid}{$serviceid}{$chanid};
                    if (!$row->{matched}) {
                        # Make sure callsign and name are defined and not blank
                        my $callsign = $row->{callsign} || $row->{serviceid};
                        my $name     = $row->{name}     || "unknown-$row->{serviceid}";
                        push @rows, {
                            sourceid  => $row->{sourceid},
                            serviceid => $row->{serviceid},
                            channum   => $row->{channum},
                            visible   => $row->{visible},
                            delete    => 0,
                            callsign  => $callsign,
                            name      => $name,
                        };
                    }
                }
            }
        }
        # Write out the rows in channum order
        foreach my $row (sort {$a->{channum} <=> $b->{channum}} @rows) {
            print OUTPUTFILE "$row->{sourceid}\t$row->{serviceid}\t$row->{channum}\t$row->{visible}\t0\t$row->{callsign}\t$row->{name}\n";
            $news += 1;
            $inputfilechanged = 1;
        }
        print OUTPUTFILE "# ...$news new channels added\n";
        close OUTPUTFILE;

        # Rename the new and old files
        if ($newfile) {
            unlink $inputFile;
            if (move($outputFile, $inputFile)) {
                print "\nNew file '$inputFile' has been created\n";
            } else {
                print "\nERROR: Failed to rename the new file ($!)\n";
            }
        } else {
            if ($inputfilechanged) {
                my $renamedInputFile = "$inputFile-$timestamp";
                if (move($inputFile, $renamedInputFile)) {
                    if (move($outputFile, $inputFile)) {
                        print "\nFiles updated: current file is '$inputFile', with '$renamedInputFile' as the backup\n";
                    } else {
                        print "\nERROR: Input file renamed to '$renamedInputFile', but failed to rename the new file ($!)\n";
                    }
                } else {
                    print "\nERROR: Could not rename the input file to '$renamedInputFile' ($!)\n";
                    print "       New file is '$outputFile'\n";
                }
            } else {
                print "\nNo changes to the input file\n";
                print "(deleting temporary file '$outputFile')\n" if $opt{debug};
                unlink $outputFile;
            }
        }
    }

    1; # return 'true' from this eval block

} or do {
    my $error = DBI->errstr || $@;
    die "$error\n";    
}; # end of eval block

$dbh->disconnect;

# Statistics
print "\n";
if (!$opt{fileupdate} and !$opt{dbupdate}) {
    print "NOTE: Neither --fileupdate nor --dbupdate were specified:\n";
    print "      nothing has been done except checking for errors in the input file\n";
}
print "$icons icons downloaded\n" if $opt{dbupdate};
print "$deleted channels deleted from table\n" if $opt{dbupdate};
print "$updated channels updated in table\n" if $opt{dbupdate};
print "$news new channels added to file\n" if $opt{fileupdate};
print "$marked channels newly marked as deleted in file\n" if $opt{fileupdate};
print " (no updates actually done: use '--commit' to really update the database)\n" if $opt{dbupdate} && !$opt{commit};
print "\nmythupchuk has finished\n";

# That's the end of the mainline code

######################################################################

sub readInputFile {
    # Process the channels file, 
    # storing each line in an array, along with its parsed details
    # and other information
    my $inputFile = shift;
    my $rowsR     = shift;
    my @lines;
    open INPUTFILE,  '<', $inputFile  or die "Can't read $inputFile\n";
    my $n = 0;          # line count
    my %channelSeen;    # to check for duplicates
    my $errors = 0;
    while (<INPUTFILE>) {
        chomp;
        $n += 1;
        my $prefixRemoved = s/^#x\s*//;            # reconsider auto-commented lines
        if (/^
             \s*       (?<sourceid>  \d+    )  
             \s*\t+\s* (?<serviceid> [^\t]+ )  
             \s*\t+\s* (?<channum>   [^\t]+ )  
             \s*\t+\s* (?<visible>   [01]   )  
             \s*\t+\s* (?<delete>    [01]   )  
             \s*\t+\s* (?<callsign>  [^\t]+ )  
             \s*\t+\s* (?<name>      [^\t]+ ) 
            (\s*\t+\s* (?<xmltvid>   [^\t]+ ))?    # xmltvid is optional 
            (\s*\t+\s* (?<icon>      [^\t]+ ))?    # icon is optional 
            /x) {
            if ($channelSeen{"$+{sourceid}-$+{serviceid}"}) {
                print "ERROR: Line $n specifies the same channel as line " . $channelSeen{"$+{sourceid}-$+{serviceid}"};
                print " (both have sourceid $+{sourceid} and serviceid $+{serviceid})\n";
                $errors += 1;
            } else {
                $channelSeen{"$+{sourceid}-$+{serviceid}"} = $n;
            }
            # It is a valid channel line
            push @$rowsR, {
                raw       => $_,
                valid     => 1,
                sourceid  => $+{sourceid},
                serviceid => $+{serviceid},
                channum   => $+{channum},
                visible   => $+{visible},
                delete    => $+{delete},
                callsign  => $+{callsign},
                name      => $+{name},
                xmltvid   => $+{xmltvid} || '',
                icon      => $+{icon}    || '',
                marked    => $prefixRemoved ? 1 : 0,
            }
        } elsif (/^\s*\#|^\s*$/) {   
            # Store comments and blank lines
            push @$rowsR, {
                raw   => $_,
                valid => 0,
            };
        } else {
            print "ERROR: Invalid data at line $n: '$_'\n";
            $errors += 1;
            # but store it anyway
            push @$rowsR, {
                raw   => $_,
                valid => 0,
            };
        }
    }
    close INPUTFILE;
    if ($errors) {  
        die "\nERROR: One or more problems found in the input file -- see messages above.\n" .
              "       Please correct the input file before re-running mythupchuk\n";
    }
}

sub readXMLTV {
    # Read XMLTV info from the Radio Times (or other source)
    sub addinfo {
        # Add entries to the id and icon hashes
        my $name = shift;
        my $id   = shift;
        my $icon = shift;
        my $sqname = &squash($name);
        $IDbyName{$sqname}   = $id;
        $IconByName{$sqname} = $icon;
    }
    print "Running XMLTV grabber '$opt{grabber}' ... ";
    my $xmlstring = `$opt{grabber}`;
    my $tvgrabrc = $?;
    print "done\n";
    if ($tvgrabrc) {
        print "\nWARNING: Failed to run 'tv_grab_uk_rt --list-channels' (rc=$tvgrabrc)\n"; 
        print "         XMLTVID and Icon updates will not be done\n;"
    } else {
        my $xs1 = XML::Simple->new();
        my $doc = $xs1->XMLin($xmlstring);
        if($opt{geticons} && !$opt{verbose})
        {
            print "Getting icons:  u=up-to-date  r=renewed  n=new  e=existing  !=failed\n";
        } 
        foreach my $key (keys (%{$doc->{channel}})) {
            my $entry = $doc->{channel}->{$key};
            if (ref($entry->{'display-name'}) eq "ARRAY") {
                # we've got an array of names
                foreach my $dname (@{$entry->{'display-name'}}) {
                    &addinfo($dname, $key, &geticon($entry->{icon}->{src}));
                }
            } else {
                &addinfo($entry->{'display-name'}, $key, &geticon($entry->{icon}->{src}));
            }
        }
        print " done\n" if $opt{geticons} && !$opt{verbose};
    }
}

sub geticon {
    # Given an icon's url, get it (if required), and return it's local filename
    my $url = shift;
    return '' if !$url;    
    my $basename = basename($url);    # does this work for URLs? it seems to
    my $iconfile = catfile($opt{icondir}, $basename);
    my $flag = 'n'; # new
    if (-f $iconfile) {
        # Icon is already stored locally
        if ($opt{geticons} and $opt{renew}) {
            # We need to download it anyway
            $flag = 'r';  # renewing
        } else {
            if ($opt{geticons}) {
                print $opt{verbose} ? "Keeping existing icon '$basename'\n" : 'e';
            }
            return $iconfile;
        }
    }
    if (!$opt{geticons}) {
        return '';
    }
    my $rc = 0;
    $rc = LWP::Simple::mirror($url, $iconfile);
    if ($rc == 304) {
        # icon is already up to date
        print $opt{verbose} ? "Icon $basename is already up-to-date\n" : 'u';
    } elsif (LWP::Simple::is_error($rc)) {
        print $opt{verbose} ? "Couldn't get icon from '$url', rc=$rc\n" : '!';
        return '';
    } else {
        if ($flag eq 'r') {
            print $opt{verbose} ? "Renewed icon '$basename' as '$iconfile'\n" : "$flag";
        } else {
            print $opt{verbose} ? "Stored new icon '$basename' as '$iconfile'\n" : "$flag";
        }
        $icons += 1;
    }
    return $iconfile
}

sub updateChannel {
    # Update a row in the channel table if there are any changes to be made
    my $dbh    = shift;     # database handle
    my $chanid = shift;     # key of row to update
    my $db     = shift;     # original values from db (hashref)
    my $file   = shift;     # new values from file (hashref)
    my @columns = @_;   
    print "uC: db      = " . join(' ', map {"$_='$db->{$_}'"}   sort keys %{$db}  ) . "\n" if $opt{debug};
    print "uC: file    = " . join(' ', map {"$_='$file->{$_}'"} sort keys %{$file}) . "\n" if $opt{debug};
    print "uC: columns = @columns\n" if $opt{debug};
    my %changes;
    foreach my $col (@columns) {
        $changes{$col} = $file->{$col} if $file->{$col} ne $db->{$col};
    }
    my $keys   = join(', ', map {"$_ = ?"} keys %changes);
    my @values = values %changes;
    my $sql = "update channel set $keys where chanid = ?"; 
    if (%changes) {
        my $rows = 1;    # no. of rows we expect to update
        $rows = $dbh->do($sql, undef, @values, $chanid) if $opt{commit};
        print "$rows row(s) affected\n" if $opt{debug};
        print "Updated channel $chanid (serviceid $db->{serviceid}, callsign '$db->{callsign}') \n\twith value(s) " . join(', ', map {"$_='$changes{$_}'"} keys %changes) . ", affecting $rows row(s)\n";
        $updated += $rows;
    } else {
        print "No changes required for chanid $chanid\n" if $opt{debug};
    }
}

sub squash {
    # Fold channel name to lower case and remove spaces and punctuation
    # as a way of increasing the chances of a match
    my $s = lc(shift // '');
    $s =~ s/\s//g;
    #$s =~ s/[\(\)\.,-_\?!]//g;    # not '+' !
    return $s;
}

sub strip {
    # Strip leading and trailing white space, and surrounding quotes,
    # from a string
    my $string = shift;
    $string =~ s/^\s+//;                # strip leading white-space
    $string =~ s/\s+$//;                # strip trailing white-space
    if (!($string =~ s/^'(.*)'$/$1/)) { # strip single quotes
        $string =~ s/^"(.*)"$/$1/;      # strip double quotes if no singles
    }    
    $string =~ s/^\s+//;                # strip white-space again
    $string =~ s/\s+$//;
    return $string;
}

sub matchXmltvid {
    # Try to match the channel name against the XMLTVID list
    # returning the xmltvid and the corresponding icon
    my $sqname = shift;
    #my $sqname = &squash($name);
    if ($IDbyName{$sqname}) {
        print "   straight match on $sqname\n" if $opt{debug};
        return $IDbyName{$sqname}, $IconByName{$sqname};
    } else {
        # no obvious match -- try some hacks
        my $hackedname = hackit($sqname);
        if ($hackedname ne $sqname) {
            print "   hacked $sqname to $hackedname\n" if $opt{debug};
            $sqname = $hackedname;
            return $IDbyName{$sqname}, $IconByName{$sqname} if $IDbyName{$sqname};
            print "   but" if $opt{debug};
        }
    }
    print "   no match for $sqname\n" if $opt{debug};
    return '', '';
}

sub hackit {
    # A few dodgy hacks to increase the hit rate
    # NOTE some names have regex characters such as '*' and '+'  in them
    my $sqname = shift;
    for ($sqname) {
        # Return this name as                   if the name in the file
        # the xmltv name:                       matches this pattern:
        return 'cbbc'                           if /^cbbc/;         # ignore trailing 'channel'
        return 'bbcparliament'                  if /^bbcparl/;      # ignore ' etc.
        return 'aljazeeraenglish'               if /^aljazeeraeng$/; # There's a separate freeview one
                                                                     # -- requires an edit in the channels file
        return 'cnninternational'               if /^cnn$/;
        return 'cnbceurope'                     if /^cnbc$/;
        return 'propellertv'                    if /^propeller$/;
        return 'horrorchannel+1'                if /^horrorch.*\+1$/;
        return 'horrorchannel'                  if /^horrorch/;
        return 'movies4men+1'                   if /^mov.*4men\+1$/;
        return 'movies4men'                     if /^mov.*4men$/;
        # BBC - special cases first, then simple conversion from '1' to 'one'
        return 'bbconechannelislands'           if /^bbc(?:1|one)ci$/;
        return 'bbconenortheast&cumbria'        if /^bbc(?:1|one)ne&c$/;
        return 'bbconenorthwest'                if /^bbc(?:1|one)nwest$/;
        return 'bbconeyorkshire'                if /^bbc(?:1|one)yorks$/;
        return 'bbconesouthwest'                if /^bbc(?:1|one)swest$/;
        return 'bbconewestmidlands'             if /^bbc(?:1|one)wmids$/;
        return 'bbconesoutheast'                if /^bbc(?:1|one)seast$/;
        return 'bbconeeastmidlands'             if /^bbc(?:1|one)emids$/;
        return 'bbconeyorkshire&lincolnshire'   if /^bbc(?:1|one)yrks&lin$/;
        return 'bbconenorthernireland'          if /^bbc(?:1|one)ni$/;
        return "bbcone$opt{bbc1}"               if /^bbc(?:1|one)$/;        # BBC1 default region
        return "bbcone$1"                       if /^bbc(?:1|one)(.*)$/;    # BBC1 catch-all
        return 'bbctwonorthernireland'          if /^bbc(?:2|two)ni$/;
        # (there are lots more bbc2's in the xmltv list)
        return "bbctwo$opt{bbc2}"               if /^bbc(?:2|two)$/;        # BBC2 - default region
        return "bbctwo$1"                       if /^bbc(?:2|two)(.*)$/;    # BBC2 catch-all
        # ITV 
        return 'itvchanneltelevision'          if /^itv1?channelis$/;
        return 'itvcentral'                    if /^itv1?central/;  # central s|e|w|sw  all become just central
        return 'itvwestcountry'                if /^itv1?wcountry$/;
        return 'itvyorkshire'                  if /^itv1?york/;     # yorks w|e both become just yorkshire
        return 'itvmeridian'                   if /^itv1?meridian/; # meridianse and merse both become meridian
        return 'itvanglia'                     if /^itv1?anglia/;   # anglia e|w both become anglia
        return "itv$opt{itv}$1"                if /^itv1?((?:\+1)*)$/;      # ITV1+1 - default region
        return "itv3+1freeview"                if /^itv3\+1$/;      # ITV3+1 - Freeview version
        # (there are also ITV channels with brackets in the xmltv name -- don't know what they're for)
        # Channel 4 -- single listing in xmltv, regions just have different adverts, so ignore any trailing region
        # (the tuning process just returns e.g. name='Channel 4' -- any regions require editing the channels file
        # by looking up the service id on LyngSat or similar)
        return 'channel4+1'                     if /^channel4+1/;
        return 'channel4'                       if /^channel4/;
        return 'channel4hd'                     if /^channel4hd/;
        return "channel4$opt{c4}"               if /^channel4$/;    # C4 defaults;
        return "channel4$opt{c4}+1"             if /^channel4+1$/;
        # Channel 5 -- single listing in xmltv, regions just have different adverts, so ignore any trailing region
        return 'channel5+1'                     if /^channel5+1/;
        return 'channel5'                       if /^channel5/;
        return "channel5$opt{c5}"               if /^channel5$/;    # C5 defaults;
        return "channel5$opt{c5}+1"             if /^channel5+1$/;
        # Regional channels
        # STV regions require manual editing of the channels file with reference to LyngSat
        return "stv$opt{stv}"                   if /^stv$/;         # STV defaults
        return "stv$opt{stv}+1"                 if /^stv+1$/;

		# Radio
        return 'bbcradio1xtra'                  if /r1x$/;
        return 'bbcradio4extra'                 if /radio4ex/;
        return 'bbcradio4fm'                    if /radio4/;
        return 'bbcradio5livesportsextra'       if /r5sx/;
        return 'bbcradio5live'                  if /r5l/;
        return 'bbcradio6music'                 if /6music/;
        return 'bbcasiannetwork'                if /bbcasian/;
        return 'bbcworldservice'                if /bbcworld/;
        return 'talksportdab'                   if /talksport/;
    } 
    return $sqname;
}

# vim: tabstop=4 softtabstop=4 shiftwidth=4 expandtab
